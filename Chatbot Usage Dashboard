<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chatbot Usage Dashboard</title>
    <!-- Tailwind CSS for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Supabase JS Client -->
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <!-- Chart.js for visualizations -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            background-color: #f3f4f6;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }
    </style>
</head>
<body class="p-4 sm:p-6 md:p-8">
    <div class="max-w-7xl mx-auto">
        <!-- Header -->
        <div class="mb-8">
            <h1 class="text-3xl font-bold text-gray-800">Chatbot Usage Dashboard</h1>
            <p class="text-gray-500">Live metrics from your Supabase database.</p>
        </div>

        <!-- Credentials Input - Only shown if not configured -->
        <div id="credentials-form" class="mb-8 p-6 bg-white rounded-lg shadow-md border border-yellow-300">
            <h2 class="text-xl font-semibold text-gray-700 mb-2">Connect to Supabase</h2>
            <p class="text-gray-600 mb-4">Please enter your Supabase Project URL and Anon Key to view the dashboard. This information is only stored in your browser.</p>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <label for="supabase-url" class="block text-sm font-medium text-gray-700">Supabase URL</label>
                    <input type="text" id="supabase-url" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" placeholder="https://your-project-ref.supabase.co">
                </div>
                <div>
                    <label for="supabase-key" class="block text-sm font-medium text-gray-700">Supabase Anon (Public) Key</label>
                    <input type="text" id="supabase-key" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" placeholder="ey...">
                </div>
            </div>
            <button id="connect-btn" class="mt-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Connect & View Dashboard
            </button>
        </div>

        <!-- Dashboard Content - Hidden by default -->
        <div id="dashboard-content" class="hidden">
            <!-- Metric Cards -->
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                <!-- Total Sessions -->
                <div class="bg-white p-6 rounded-lg shadow-md">
                    <h3 class="text-sm font-medium text-gray-500">Total Sessions</h3>
                    <p id="total-sessions" class="mt-1 text-3xl font-semibold text-gray-900">--</p>
                </div>
                <!-- Average Messages -->
                <div class="bg-white p-6 rounded-lg shadow-md">
                    <h3 class="text-sm font-medium text-gray-500">Avg. Messages / Session</h3>
                    <p id="avg-messages" class="mt-1 text-3xl font-semibold text-gray-900">--</p>
                </div>
                <!-- Completed Profiles -->
                <div class="bg-white p-6 rounded-lg shadow-md">
                    <h3 class="text-sm font-medium text-gray-500">Completed Company Profiles</h3>
                    <p id="completed-profiles" class="mt-1 text-3xl font-semibold text-gray-900">--</p>
                </div>
            </div>

            <!-- Charts and Tables -->
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <!-- Chart -->
                <div class="lg:col-span-1 bg-white p-6 rounded-lg shadow-md">
                    <h3 class="text-lg font-medium text-gray-800 mb-4">Food Vertical Breakdown</h3>
                    <canvas id="verticals-chart"></canvas>
                </div>

                <!-- Recent Sessions Table -->
                <div class="lg:col-span-2 bg-white p-6 rounded-lg shadow-md">
                    <h3 class="text-lg font-medium text-gray-800 mb-4">Recent Sessions</h3>
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Company Name</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Food Vertical</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Updated</th>
                                </tr>
                            </thead>
                            <tbody id="sessions-table-body" class="bg-white divide-y divide-gray-200">
                                <!-- Rows will be inserted here by JavaScript -->
                                <tr><td colspan="3" class="px-6 py-4 text-center text-gray-500">Loading...</td></tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const { createClient } = supabase;
        let supabaseClient;
        let chartInstance;

        const ui = {
            credentialsForm: document.getElementById('credentials-form'),
            dashboardContent: document.getElementById('dashboard-content'),
            urlInput: document.getElementById('supabase-url'),
            keyInput: document.getElementById('supabase-key'),
            connectBtn: document.getElementById('connect-btn'),
            totalSessions: document.getElementById('total-sessions'),
            avgMessages: document.getElementById('avg-messages'),
            completedProfiles: document.getElementById('completed-profiles'),
            sessionsTableBody: document.getElementById('sessions-table-body'),
            verticalsChart: document.getElementById('verticals-chart'),
        };

        // --- MAIN LOGIC ---

        async function init() {
            // Check if credentials are in localStorage
            const savedUrl = localStorage.getItem('supabaseUrl');
            const savedKey = localStorage.getItem('supabaseKey');

            if (savedUrl && savedKey) {
                ui.urlInput.value = savedUrl;
                ui.keyInput.value = savedKey;
                await connectAndLoad();
            }

            ui.connectBtn.addEventListener('click', async () => {
                localStorage.setItem('supabaseUrl', ui.urlInput.value);
                localStorage.setItem('supabaseKey', ui.keyInput.value);
                await connectAndLoad();
            });
        }

        async function connectAndLoad() {
            const supabaseUrl = ui.urlInput.value.trim();
            const supabaseKey = ui.keyInput.value.trim();

            if (!supabaseUrl || !supabaseKey) {
                alert('Please enter both Supabase URL and Anon Key.');
                return;
            }

            try {
                supabaseClient = createClient(supabaseUrl, supabaseKey);
                console.log("Supabase client created.");

                // Test connection by fetching a single row
                const { error } = await supabaseClient.from('sessions').select('*').limit(1);
                if (error) throw error;
                
                console.log("Supabase connection successful.");
                ui.credentialsForm.classList.add('hidden');
                ui.dashboardContent.classList.remove('hidden');
                
                loadDashboardData();

            } catch (error) {
                alert(`Failed to connect to Supabase. Check your credentials and table permissions. Error: ${error.message}`);
                console.error("Supabase connection error:", error);
            }
        }

        async function loadDashboardData() {
            if (!supabaseClient) return;

            // Fetch all data in parallel
            const { data, error } = await supabaseClient
                .from('sessions')
                .select('collectedData, conversationHistory, lastUpdated')
                .order('lastUpdated', { ascending: false });

            if (error) {
                console.error("Error fetching sessions:", error);
                return;
            }
            
            // --- Calculate Metrics ---
            const totalSessions = data.length;
            
            const totalMessages = data.reduce((sum, session) => {
                const history = session.conversationHistory || [];
                return sum + history.length;
            }, 0);
            const avgMessages = totalSessions > 0 ? (totalMessages / totalSessions).toFixed(1) : 0;

            const completedProfiles = data.filter(session => {
                const d = session.collectedData || {};
                return d.companyName && d.foodVertical && d.businessModel;
            }).length;

            // --- Update UI ---
            ui.totalSessions.textContent = totalSessions;
            ui.avgMessages.textContent = avgMessages;
            ui.completedProfiles.textContent = completedProfiles;

            // --- Update Table ---
            updateSessionsTable(data.slice(0, 10)); // Show top 10 recent

            // --- Update Chart ---
            updateVerticalsChart(data);
        }
        
        function updateSessionsTable(sessions) {
            ui.sessionsTableBody.innerHTML = ''; // Clear existing rows
            if (sessions.length === 0) {
                 ui.sessionsTableBody.innerHTML = '<tr><td colspan="3" class="px-6 py-4 text-center text-gray-500">No sessions found.</td></tr>';
                 return;
            }
            
            sessions.forEach(session => {
                const collectedData = session.collectedData || {};
                const companyName = collectedData.companyName || 'N/A';
                const foodVertical = collectedData.foodVertical || 'N/A';
                const lastUpdated = new Date(session.lastUpdated).toLocaleString();

                const row = `
                    <tr>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${companyName}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${foodVertical}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${lastUpdated}</td>
                    </tr>
                `;
                ui.sessionsTableBody.innerHTML += row;
            });
        }

        function updateVerticalsChart(sessions) {
            const verticalCounts = sessions.reduce((acc, session) => {
                const vertical = session.collectedData?.foodVertical;
                if (vertical) {
                    acc[vertical] = (acc[vertical] || 0) + 1;
                }
                return acc;
            }, {});

            const labels = Object.keys(verticalCounts);
            const data = Object.values(verticalCounts);

            if (chartInstance) {
                chartInstance.destroy();
            }

            chartInstance = new Chart(ui.verticalsChart, {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Food Verticals',
                        data: data,
                        backgroundColor: [
                            '#4f46e5', '#ec4899', '#f59e0b', '#10b981', '#3b82f6', '#8b5cf6'
                        ],
                        hoverOffset: 4
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                    }
                }
            });
        }

        // --- Start the application ---
        document.addEventListener('DOMContentLoaded', init);

    </script>
</body>
</html>
